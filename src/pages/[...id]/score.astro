---
import PageHeader from "@components/PageHeader.astro";
import { getPlayersFromGameSession } from "@data/gameSessionPlayer";
import { getGameSessionScore } from "@data/score";
import AppLayout from "@layouts/AppLayout.astro";
import { Icon } from "astro-icon/components";

const { id } = Astro.params;
if (!id || isNaN(+id)) {
  return new Response("Not found", { status: 404 });
}

const score = await getGameSessionScore(+id);
const players = await getPlayersFromGameSession(+id);

const scoreData = players.map(({ Player }) => ({
  player: Player,
  score: score.filter((s) => s.winnerId === Player.id).length,
  leader: false,
}));

const leader = scoreData.sort((a, b) => b.score - a.score)[0];

const finalPlayers = scoreData
  .map((player) => {
    return { ...player, leader: player.player.id === leader.player.id };
  })
  .sort((a, b) => (b.player.name < a.player.name ? 1 : -1));
---

<AppLayout title="Cardio | Game session score">
  <PageHeader
    title="Game session score"
    description="Who is the best player?"
  />

  <div class="mt-8">
    <p class="mb-6">
      You played a total of <span id="total-score">{score.length}</span> games.
    </p>
    <section class="flex flex-wrap gap-10">
      {
        finalPlayers.map(({ player, score, leader }) => (
          <div class="w-full rounded border-2 px-6 py-2 sm:w-60">
            <h2 class="text-center text-xl font-semibold">
              {player.name} {leader && <span>üèÜ</span>}
            </h2>
            <div class="mt-8 flex items-center justify-between text-xl font-bold">
              <form>
                <button class="flex h-12 w-12 items-center justify-center rounded border-2 border-red-400 hover:bg-red-50 sm:h-8 sm:w-8 dark:border-red-700 dark:text-white dark:hover:bg-red-950">
                  <input type="hidden" name="gameSessionId" value={id} />
                  <input type="hidden" name="playerIdMinus" value={player.id} />
                  <Icon name="minus" class="h-6 w-6" />
                </button>
              </form>
              <p id={`player-${player.id}-score`}>{score}</p>
              <form>
                <button class="flex h-12 w-12 items-center justify-center rounded border-2 border-lime-400 hover:bg-lime-50 sm:h-8 sm:w-8 dark:border-lime-700 dark:text-white dark:hover:bg-lime-950">
                  <input type="hidden" name="gameSessionId" value={id} />
                  <input type="hidden" name="playerIdPlus" value={player.id} />
                  <Icon name="plus" class="h-6 w-6" />
                </button>
              </form>
            </div>
          </div>
        ))
      }
    </section>
  </div>
</AppLayout>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  const storeScoreLocally = (formData: FormData) => {
    const dataToSave = {
      gameSessionId: formData.get("gameSessionId"),
      playerIdPlus: formData.get("playerIdPlus"),
      playerIdMinus: formData.get("playerIdMinus"),
      scoreDate: new Date(),
    };

    const data = JSON.parse(localStorage.getItem("score") || "[]");
    data.push(dataToSave);
    localStorage.setItem("score", JSON.stringify(data));
  };

  const updateUI = (formData: FormData, actionType: "plus" | "minus") => {
    const ID = actionType === "plus" ? "playerIdPlus" : "playerIdMinus";
    const playerId = formData.get(ID);

    const totalScore = document.getElementById("total-score");
    if (totalScore) {
      const currentScore = parseInt(totalScore.innerHTML);
      totalScore.innerHTML =
        actionType === "plus" ? `${currentScore + 1}` : `${currentScore - 1}`;
    }

    const score = document.getElementById(`player-${playerId}-score`);
    if (score) {
      const currentScore = parseInt(score.innerHTML);
      score.innerHTML =
        actionType === "plus" ? `${currentScore + 1}` : `${currentScore - 1}`;
    }
  };

  const syncLocalScore = () => {
    const data = JSON.parse(localStorage.getItem("score") || "[]");
    const formattedForSync = data.map((data: any) => {
      return {
        ...data,
        gameSessionId: +data.gameSessionId,
        playerIdPlus: +data.playerIdPlus,
        playerIdMinus: +data.playerIdMinus,
      };
    });
    return actions.score.sync(formattedForSync);
  };

  const handleSubmission = async (
    formData: FormData,
    actionType: "plus" | "minus",
  ) => {
    if (navigator.onLine) {
      if (localStorage.getItem("score")) {
        const { error } = await syncLocalScore();
        if (!error) {
          localStorage.removeItem("score");
        } else {
          // TODO handle error
        }
      }

      const { error } = await actions.score[actionType](formData);
      if (!error) navigate(window.location.pathname);
    } else {
      storeScoreLocally(formData);
      updateUI(formData, actionType);
    }
  };

  document.addEventListener("astro:page-load", () => {
    const forms = document.querySelectorAll("form");
    forms.forEach((form) => {
      form?.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(form);
        const actionType = formData.get("playerIdPlus") ? "plus" : "minus";

        handleSubmission(formData, actionType);
      });
    });
  });
</script>
